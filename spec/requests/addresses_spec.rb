# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/addresses', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Address. As you add validations to Address, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      house_no: '23',
      first_line: 'Hello world',
      county: 'Testplaceshire',
      post_code: 'EE3 4RR'
    }
  end

  let(:invalid_attributes) do
    {
      house_no: nil,
      post_code: 2222
    }
  end

  let(:user) { create(:user) }

  describe 'GET /show' do
    it 'renders a successful response' do
      login_user(user, 'password', users_sign_in_path)
      address = create(:address, addressable_id: user.id)
      get address_url(address)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      login_user(user, 'password', users_sign_in_path)
      get new_address_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      login_user(user, 'password', users_sign_in_path)
      address = create(:address, addressable_id: user.id)
      get edit_address_url(address)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Address' do
        login_user(user, 'password', users_sign_in_path)
        expect do
          post addresses_url, params: { address: valid_attributes }
        end.to change(Address, :count).by(1)
      end

      it 'redirects to the created address' do
        login_user(user, 'password', users_sign_in_path)
        post addresses_url, params: { address: valid_attributes }
        expect(response).to redirect_to(address_url(Address.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Address' do
        login_user(user, 'password', users_sign_in_path)
        expect do
          post addresses_url, params: { address: invalid_attributes }
        end.to change(Address, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        login_user(user, 'password', users_sign_in_path)
        post addresses_url, params: { address: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          house_no: '200'
        }
      end

      it 'updates the requested address' do
        login_user(user, 'password', users_sign_in_path)
        address = create(:address, addressable_id: user.id)
        patch address_url(address), params: { address: new_attributes }
        address.reload

        expect(address.house_no).to eq('200')
      end

      it 'redirects to the address' do
        login_user(user, 'password', users_sign_in_path)
        address = create(:address, addressable_id: user.id)
        patch address_url(address), params: { address: new_attributes }
        address.reload
        expect(response).to redirect_to(address_url(address))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        login_user(user, 'password', users_sign_in_path)
        address = create(:address, addressable_id: user.id)
        patch address_url(address), params: { address: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested address' do
      login_user(user, 'password', users_sign_in_path)
      address = create(:address, addressable_id: user.id)
      expect do
        delete address_url(address)
      end.to change(Address, :count).by(-1)
    end

    it 'redirects to the addresses list' do
      login_user(user, 'password', users_sign_in_path)
      address = create(:address, addressable_id: user.id)
      delete address_url(address)
      expect(response).to redirect_to(addresses_url)
    end
  end
end
